import{_ as e,r as p,o as t,c as o,a as n,b as c,F as r,d as s,e as l}from"./app.2be90291.js";const i={},u=n("h2",{id:"leetcode-20-valid-parentheses-javascript",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#leetcode-20-valid-parentheses-javascript","aria-hidden":"true"},"#"),s(" Leetcode 20. Valid Parentheses (JavaScript)")],-1),k={id:"problem-read-at-the-leecode",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#problem-read-at-the-leecode","aria-hidden":"true"},"#",-1),b=s(" Problem: Read at the "),m={href:"https://leetcode.com/problems/valid-parentheses/",target:"_blank",rel:"noopener noreferrer"},h=s("leecode"),_=l(`<h2 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> Solution:</h2><p>Here we are gonna use <code>stack</code> data structure which is just a array and <code>hashmap</code> which can be implemented as object.</p><h2 id="algorithm" tabindex="-1"><a class="header-anchor" href="#algorithm" aria-hidden="true">#</a> Algorithm</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>    <span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;}&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&#39;)&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span>
            <span class="token string-property property">&#39;]&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;[&#39;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>s<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token comment">// halt program immediately if empty stack</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">let</span> curr <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">let</span> top <span class="token operator">=</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;0&#39;</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>top <span class="token operator">!==</span> map<span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{</span>
                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>`,4);function f(y,g){const a=p("ExternalLinkIcon");return t(),o(r,null,[u,n("h4",k,[d,b,n("a",m,[h,c(a)])]),_],64)}var v=e(i,[["render",f],["__file","20. Valid Parentheses.html.vue"]]);export{v as default};
