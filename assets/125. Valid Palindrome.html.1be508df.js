import{_ as e,r as t,o,c as p,a as n,b as c,F as r,d as s,e as l}from"./app.77a19a75.js";const i={},u=n("h3",{id:"problem",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#problem","aria-hidden":"true"},"#"),s(" Problem:")],-1),d=s("Read it at the "),k={href:"https://leetcode.com/problems/valid-palindrome/",target:"_blank",rel:"noopener noreferrer"},m=s("leetcode"),h=l(`<h3 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> Solution:</h3><p>Here we are gonna use Regex (Regular expressions).</p><p>Regular expressions are patterns used to match character combinations in strings.</p><h4 id="pseudocode" tabindex="-1"><a class="header-anchor" href="#pseudocode" aria-hidden="true">#</a> PseudoCode:</h4><ol><li><p>We have to remove all <strong>non-Alpanumeric</strong> characters (Using <code>Regex</code>) and convert them to lower case</p></li><li><p>Now we just have to check if output string if it&#39;s palindrome or not</p></li><li><p>Initiate the loop and check first element with last element</p></li><li><p>If they are same repeat the step by incrementing the <code>left</code> and decrementing <code>right</code> pointer</p></li><li><p>If they are not the same we can instantly return <code>false</code></p></li><li><p>After the loop is complete we can say our string is palindrome and return <code>true</code></p></li></ol><h3 id="algorithm" tabindex="-1"><a class="header-anchor" href="#algorithm" aria-hidden="true">#</a> Algorithm:</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@param</span> <span class="token class-name"><span class="token punctuation">{</span>string<span class="token punctuation">}</span></span> <span class="token parameter">s</span>
 * <span class="token keyword">@return</span> <span class="token class-name"><span class="token punctuation">{</span>boolean<span class="token punctuation">}</span></span>
 */</span>
<span class="token keyword">var</span> <span class="token function-variable function">isPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^A-Za-z0-9]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// we check replace except A-Z,</span>
                                                    <span class="token comment">// a-z,0-9  with &#39;&#39;(empty)</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>s<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>`,7);function b(g,f){const a=t("ExternalLinkIcon");return o(),p(r,null,[u,n("p",null,[d,n("a",k,[m,c(a)])]),h],64)}var x=e(i,[["render",b],["__file","125. Valid Palindrome.html.vue"]]);export{x as default};
